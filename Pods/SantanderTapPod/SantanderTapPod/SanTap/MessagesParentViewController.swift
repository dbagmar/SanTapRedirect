//
//  MessagesParentViewController.swift
//  TecladoiMessage
//
//  Created by Darshan Bagmar on 19/05/20.
//  Copyright Â© 2020 IDmission. All rights reserved.
//

import UIKit
import Messages
import CoreLocation
var genratURLModel:GenerateURLModelResponse?
open class MessagesParentViewController: MSMessagesAppViewController {
    var messageUi:Bool?
      let locationManager = CLLocationManager()
    override open func viewDidLoad() {
        super.viewDidLoad()
        self.saveData()
        locationManager.requestAlwaysAuthorization()
        // Do any additional setup after loading the view.
        self.loadMyCustomFont(name: "stap_SantanderText-Regular")
        self.loadMyCustomFont(name: "stap_SantanderText-Bold")
    }
    
  
    
    func saveData() {
        let defaults = UserDefaults.standard
        defaults.set("https://bypass-app-paas-heroku.herokuapp.com/v2/", forKey: UAT)
        defaults.set("", forKey: UATKey)
        defaults.set("https://devs-dev.herokuapp.com/v2/", forKey: Dev)
        defaults.set("Vuy2zjFSPqF5Hz18k88DpUViKGbABaF3vZx5Raghplc=", forKey: DevKey)
        defaults.set("https://backend-pre.herokuapp.com/v2/", forKey: Dev2)
        defaults.set("Vuy2zjFSPqF5Hz18k88DpUViKGbABaF3vZx5Raghplc=", forKey: DevKey)
        defaults.set("https://santandertap.santander.com.mx/v2/", forKey: Prod)
        defaults.set("", forKey: ProdKey)
        defaults.set("https://tap-pub-web-mxswap-pre.appls.cto1.paas.gsnetcloud.corp/v2/", forKey: Pre)
        defaults.set("s8CYohXAQSsQvGMIH2YI0VpY9blY6YtqzN/i8yguehw=", forKey: PreKey)
    }

    private func loadMyCustomFont(name:String){
        let frameworkBundlePath = Bundle(for: MessagesParentViewController.self).bundlePath

        if let bundle = Bundle(path: frameworkBundlePath) {
            guard let fontPath = bundle.path(forResource: name, ofType: "ttf") else { return }
            guard let fontData = NSData(contentsOfFile:fontPath) else { return }
            var error: Unmanaged<CFError>?
            guard let provider = CGDataProvider(data: fontData) else { return }
            if let font = CGFont(provider) {
                CTFontManagerRegisterGraphicsFont(font, &error)
                if error != nil {
                    print(error!) //Or logged it
                } else {
                    print("Font Registered Success")
                }
            }
        } else {
            print("Font Registered Failured")
        }

    }

    open override func viewWillAppear(_ animated: Bool) {
        if isDeviceJailbroken {
            dismiss()
        }else{
            
        }
    }
    // MARK: - Conversation Handling
    
    override open func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        if isDeviceJailbroken {
            dismiss()
        }else{
            // Use this method to configure the extension and restore previously stored state.
            presentRatingsViewController(for: conversation, with: self.presentationStyle)
        }
      
    }
    
    override open func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override open func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
        
    }
    
    override open func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override open func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override open func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
        
        guard let conversation = activeConversation else { fatalError("Expected an active converstation") }
        
        //presentRatingsViewController(for: conversation, with: presentationStyle)
    }
    
    override open func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
    override open func didSelect(_ message: MSMessage, conversation: MSConversation) {
        super.didSelect(message, conversation: conversation)
    }
    
    
    func presentRatingsViewController(for conversation: MSConversation, with presentationStyle: MSMessagesAppPresentationStyle){
           let viewcontroller : UIViewController
        
        
        if let message = conversation.selectedMessage {
        // message selected

        // Eg. open your app:
        let url = message.url// your apps url
        let context = NSExtensionContext()
        context.open(url! as URL, completionHandler: nil)

        var responder = self as UIResponder?
        while (responder != nil){
            if responder?.responds(to: Selector("openURL:")) == true{
                responder?.perform(Selector("openURL:"), with: url)
            }
            responder = responder!.next
        }
            
            
            
        }else{
            
            let vc:CustomMessageViewController = CustomMessageViewController.init(nibName: nil, bundle:Bundle(for: CustomMessageViewController.self))
                vc.delegate = self
                viewcontroller = vc
                     for child in children {
                           child.willMove(toParent: nil)
                           child.view.removeFromSuperview()
                           child.removeFromParent()
                       }
                       
                       addChild(viewcontroller)
                       viewcontroller.view.frame = view.bounds
                       viewcontroller.view.translatesAutoresizingMaskIntoConstraints = false
                       view.addSubview(viewcontroller.view)
                       viewcontroller.view.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true
                       viewcontroller.view.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true
                       viewcontroller.view.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
                       viewcontroller.view.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
                       viewcontroller.didMove(toParent: self)
        
        }
        
           
       }

    
    fileprivate func composeMessage(with messageDetail: GenerateURLModelResponse, layoutImg: UIImage?, session: MSSession? = nil) -> MSMessage? {
        var components = URLComponents()
    
        guard let decodedCaption = messageDetail.body?.link else { return nil }
        let caption = URLQueryItem(name: "caption", value: decodedCaption)
        
        let layout = MSMessageTemplateLayout()
        
        guard let image = layoutImg else { return nil }
        layout.image = image
       // layout.caption =  "\(genratURLModel?.body?.message ?? " ")"
        components.queryItems = [caption]
      //  components.url = URL.init(string: genratURLModel?.body?.link)
        
        let message = MSMessage(session: session ?? MSSession())
        
        if let conversation = activeConversation,
            let msg = conversation.selectedMessage{
            if msg.senderParticipantIdentifier == conversation.localParticipantIdentifier {
                let url = URL.init(string: (messageDetail.body!.link))// your apps url
                self.extensionContext?.open(url!, completionHandler: { (success: Bool) in

                })
            }
            else{
                
                let url = URL.init(string: (messageDetail.body!.link))// your apps url
                self.extensionContext?.open(url!, completionHandler: { (success: Bool) in

                })
            }
        }
    
        message.url = URL.init(string: (messageDetail.body!.link))
        message.layout = layout

        return message
    }
    
    
    // MARK :- Jail brake
           var isDeviceJailbroken: Bool {

              guard TARGET_IPHONE_SIMULATOR != 1 else { return false }
              
              
              func canOpenUrl(url: URL?) -> Bool {
                     let selector = sel_registerName("canOpenURL:")
                     var responder = self as UIResponder?
                     while let r = responder, !r.responds(to: selector) {
                         responder = r.next
                     }
                     return (responder!.perform(selector, with: url) != nil)
              }

              // Check 1 : existence of files that are common for jailbroken devices
              if FileManager.default.fileExists(atPath: "/Applications/Cydia.app")
                 || FileManager.default.fileExists(atPath: "/Applications/IntelliScreen.app")
                 || FileManager.default.fileExists(atPath: "/Applications/FakeCarrier.app")
                 || FileManager.default.fileExists(atPath: "/Applications/blackra1n.app")
                 || FileManager.default.fileExists(atPath: "/Library/MobileSubstrate/MobileSubstrate.dylib")
                 || FileManager.default.fileExists(atPath: "/private/var/mobile/Library/SBSettings/Themes")
                 || FileManager.default.fileExists(atPath: "/Library/MobileSubstrate/DynamicLibraries/Veency.plist")
                 || FileManager.default.fileExists(atPath: "/Library/MobileSubstrate/DynamicLibraries/LiveClock.plist")
                 || FileManager.default.fileExists(atPath: "/System/Library/LaunchDaemons/com.ikey.bbot.plist")
                 || FileManager.default.fileExists(atPath: "/System/Library/LaunchDaemons/com.saurik.Cydia.Startup.plist")
                 || FileManager.default.fileExists(atPath: "/bin/bash")
                 || FileManager.default.fileExists(atPath: "/usr/sbin/sshd")
                 || FileManager.default.fileExists(atPath: "/etc/apt")
                 || FileManager.default.fileExists(atPath: "/private/var/lib/apt/")
                 || canOpenUrl(url: URL.init(string: "cydia://package/com.example.package"))
               {

                  return true
              }

              // Check 2 : Reading and writing in system directories (sandbox violation)
              let stringToWrite = "Jailbreak Test"
              do {
                  try stringToWrite.write(toFile:"/private/JailbreakTest.txt", atomically:true, encoding:String.Encoding.utf8)
                  // Device is jailbroken
                  return true
              } catch {
                  return false
              }
          }
}


extension MessagesParentViewController:CustomMessageViewControllerDelegate{
    func addURLMessage(_ item: GenerateURLModelResponse, layoutImg: UIImage?) {
        guard let conversation = activeConversation else { fatalError("Expected a conversation") }

               guard let message = composeMessage(with: item, layoutImg: layoutImg, session: conversation.selectedMessage?.session)
                   else { return }
               
               // Add the message to the conversation.
               conversation.insert(message) { error in
                   if let error = error {
                       printLog(error)
                   }
               }
               
               //dismiss()
           }
    
    func setMessageUi(setMessageUi: Bool) {
          // messageUi = setMessageUi
        dismiss()
          // requestPresentationStyle(.expanded)
       }
    
    
    public func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        guard let locValue: CLLocationCoordinate2D = manager.location?.coordinate else { return }
        printLog("locations = \(locValue.latitude) \(locValue.longitude)")
        let location = String(locValue.latitude) + "," + String(locValue.longitude)
        device.location = location
    }
    
}



